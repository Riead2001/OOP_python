# -*- coding: utf-8 -*-
"""OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YmN7bC2WS5f0TNuORasDbq31dUbodCDt
"""

class Student:
  name = "karan0"


s1=Student()
print(s1.name)
print(s1)

class Car:
  color ='blue'
  model= "mercedes"


car1 = Car()
print(car1.color)
print(car1.model)

class Student:

  @staticmethod
  def welcome():
     print("Welcome Student")


  college_name  = "Adamjee"
  def __init__(self,first_name ,last_name ,marks ):
    self.first_name = first_name
    self.last_name = last_name
    self.marks = marks

  def printMark(self):
    print(self.first_name , " ",self.last_name, " has got " , self.marks)




s1=Student('Riead','Hasan',98)

s2=Student('Maaisha','Mehjabin',99)
print(s1.welcome())
print(s1.printMark())

"""**Abstraction**"""

class Car:
  def __init__(self):
    self.accelarator = False
    self.brk = False
    self.clutch = False
  def start(self):
    self.accelarator = True

    self.clutch = True
    print("Car started.....")




car1=Car()
car1.start()

"""**Encapsulation**


> *Wrapping Data and Function into a single Unit*





"""

class Account:

  def __init__(self,bal , acc):
    self.balance = bal
    self.account_no = acc

  def credit(self , amount):
    self.balance = self.balance + amount
    print("You have credited " , amount , "taka for now")
    print("Your current balance is" , self.get_balance() , " taka")


  def debit(self , amount):
    self.balance = self.balance - amount
    print("You have credited " , amount, "taka for now")
    print("Your current balance is" , self.get_balance() , " taka")



  def get_balance(self):
    return self.balance



account1 = Account(10000,21212)

account1.credit(14000)
account1.credit(580)
account1.debit(4670)

"""**Del Keyword**"""

class Student:

  @staticmethod
  def welcome():
     print("Welcome Student")


  college_name  = "Adamjee"
  def __init__(self,first_name ,last_name ,marks ):
    self.first_name = first_name
    self.last_name = last_name
    self.marks = marks


s1=Student("Riead" , "Hasan" , 100)

print(s1)
del s1.first_name
del (s1)
print(s1) # will give error

"""**Private Entity**"""

class Account:
  def __init__(self,acc_n , acc_pass):
    self.account_no = acc_n
    self.__account_pass = acc_pass #privatee attribute
  def reset(self):
    print(self.__account_pass)


acc1 = Account(12345, "sdfsd")
print(acc1.account_no)
print(acc1.reset())
print(acc1.__account_pass)

class Person:
   __name ="anonymus"
   def __hello(self):
      print("hello",self.__name )

   def welcome(self ):

      self.__hello()

p1=Person()

print(p1.welcome())

"""**Inheritance**"""

#Single Inheritance



class Car:
  def __init__(self):
    self.accelarator = False
    self.brk = False
    self.clutch = False
  def start(self):
    self.accelarator = True

    self.clutch = True
    print("Car started.....")


class ToyotaCar(Car):
  def __init__(self,name):
    self.name = name

Totoya1 = ToyotaCar("Prado")
print(Totoya1.name)
print(Totoya1.start())

#Multi-Level Inheritance


class Car:
  def __init__(self):
    self.accelarator = False
    self.brk = False
    self.clutch = False
  def start(self):
    self.accelarator = True

    self.clutch = True
    print("Car started.....")


class ToyotaCar(Car):
  def __init__(self,brand):
    self.brand = brand


class Premio(ToyotaCar):
  def __init__(self,type):
    self.type = type


car1 = Premio("Electric")

print(car1.type)
print(car1.start())

#Multiple Inheritance


class A:
  varA = "welcome to class A"
class B:
  varB= "welcome to class B"

class C(A,B):
  varC = "welcome to class C"


obj = C()
print(obj.varC)
print(obj.varA)
print(obj.varB)

"""Using Super constructor to inherit the merhod and attribute of parent"""

class Car:
    def __init__(self, type):
        self.type = type
        self.accelerator = False
        self.brake = False
        self.clutch = False

    def start(self):
        self.accelerator = True
        self.clutch = True
        print("Car started.....")


class ToyotaCar(Car):
    def __init__(self, brand, type):
        super().__init__(type)  # Initialize parent class
        self.brand = brand


class Premio(ToyotaCar):
    def __init__(self, num_plate, brand, type):
        super().__init__(brand, type)  # Initialize parent class
        self.num_plate = num_plate
        super().start()



car1 = Premio("XYZ1234", "Toyota", "Electric")

print(car1.type)
print(car1.brand)
print(car1.num_plate)

# Starting the car
car1.start()

"""**Class Method**"""

class MyClass:
    instance_count = 0

    def __init__(self):
        MyClass.instance_count += 1

    @classmethod
    def get_instance_count(cls):
        return cls.instance_count

# Creating objects
obj1 = MyClass()
obj2 = MyClass()
obj3 = MyClass()


print(MyClass.get_instance_count())

class Student:
    college_name = "Adamjee"  # Class-level attribute

    @staticmethod
    def welcome():
        print("Welcome Student")

    def __init__(self, first_name, last_name, marks):
        self.first_name = first_name
        self.last_name = last_name
        self.marks = marks

    @classmethod
    def set_college_name(cls, name):
        cls.college_name = name

    @classmethod
    def get_college_name(cls):
        return cls.college_name

    def printMark(self):
        print(self.first_name, self.last_name, "has got", self.marks)


s1 = Student('Riead', 'Hasan', 98)
s2 = Student('Maaisha', 'Mehjabin', 99)

Student.welcome()

# Use the class method to retrieve and update class-level attribute
print("Original College Name:", Student.get_college_name())

Student.set_college_name("Oxford College")
print("Updated College Name:", Student.get_college_name())

# Instance method
s1.printMark()
s2.printMark()

"""**Percentage Calculator**"""

class Student:

  def __init__(self , phy , chm , math):
    self.phy = phy
    self.chm = chm
    self.math = math
    self.percentage = str(str((self.phy + self.chm + self.math)/3) + "%")


stu1 = Student(98,99,97)
print(stu1.percentage)
print(stu1.phy)
stu1.phy = 67
print(stu1.phy)
print(stu1.percentage)

"""
**Property Decorator**


> *We can see a problem that though we are changing mark of phy , the percentage is not changing according to that . Thats why we are going to use property method here .*



"""

class Student:

  def __init__(self , phy , chm , math):
    self.phy = phy
    self.chm = chm
    self.math = math


  @property
  def percentage(self):
    return str(str((self.phy + self.chm + self.math)/3) + "%")


stu1 = Student(98,99,97)
print(stu1.percentage)

stu1.phy = 67

print(stu1.percentage)

"""**Understanding the Polymorphism through  a Complex Number Problem**"""

class Complex:
  def __init__(self, real ,img):
    self.real = real
    self.img = img

  def show_num(self):
    print(self.real , "+", self.img , "i")

  def add1(self , num2):
    new_real = self.real + num2.real
    new_img = self.img + num2.img
    return Complex(new_real , new_img)

  #Using dunder or magic method
  def __add__(self , num2):
    new_real = self.real + num2.real
    new_img = self.img + num2.img
    return Complex(new_real , new_img)



num1=Complex(1,3)
num1.show_num()

num2 = Complex(4,6)
num2.show_num()

num3=num1.add1(num2)
num3.show_num()


num4 = num1+num2
num4.show_num()

"""*The codes have been practiced following the video of Shradha Khapra(ApnaCollege) videos . The notes are being attached here for further study *



> [Drive Link :](https://drive.google.com/file/d/10a2ZbFoudyQvm_uts-AaGi59JFqBSftP/view?usp=sharing)


"""

